import requests
import tldextract

# Optionally use Google's Safe Browsing API
# You need to replace YOUR_API_KEY with a real key from: https://developers.google.com/safe-browsing/
GOOGLE_API_KEY = 'YOUR_API_KEY'
GOOGLE_API_URL = f'https://safebrowsing.googleapis.com/v4/threatMatches:find?key={GOOGLE_API_KEY}'

def check_google_safe_browsing(url):
    payload = {
        "client": {
            "clientId": "yourcompany",
            "clientVersion": "1.0"
        },
        "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "POTENTIALLY_HARMFUL_APPLICATION"],
            "platformTypes": ["ANY_PLATFORM"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [{"url": url}]
        }
    }
    try:
        response = requests.post(GOOGLE_API_URL, json=payload)
        if response.status_code == 200:
            if response.json().get("matches"):
                return True
            else:
                return False
        else:
            print("Error contacting Google Safe Browsing API.")
            return None
    except Exception as e:
        print(f"Error: {e}")
        return None

def simple_heuristics(url):
    suspicious_keywords = ['login', 'verify', 'update', 'secure', 'account', 'banking']
    if len(url) > 75:
        print("‚ö†Ô∏è Long URL detected")
    if any(keyword in url.lower() for keyword in suspicious_keywords):
        print("‚ö†Ô∏è Suspicious keyword in URL")
    if '@' in url or '-' in tldextract.extract(url).domain:
        print("‚ö†Ô∏è Unusual characters in domain")
    
def phishing_check(url):
    print(f"\nüîé Checking URL: {url}")
    
    print("\n[1] Running basic heuristics...")
    simple_heuristics(url)
    
    print("\n[2] Checking Google Safe Browsing...")
    result = check_google_safe_browsing(url)
    if result:
        print("‚ùå URL is flagged as dangerous by Google Safe Browsing.")
    elif result is False:
        print("‚úÖ URL is not flagged by Google Safe Browsing.")
    else:
        print("‚ö†Ô∏è Could not determine status from Google API.")

# Example usage
user_url = input("Enter URL to check: ")
phishing_check(user_url)
